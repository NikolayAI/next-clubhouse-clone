import express from 'express';import dotenv from 'dotenv';import multer from 'multer';import cors from 'cors';import { randomUUID } from 'crypto';import sharp from 'sharp';import { unlinkSync, readFileSync, existsSync } from 'fs';import { IUserResponse } from '../frontend/shared/api';// @ts-ignoreimport { Code } from './models';import { request } from 'undici';import { randomCode } from './utils/randomCode';import './core/db';dotenv.config({  path: './.env',});import { passport } from './core/passport';const PORT = 3001;const app = express();const uploader = multer({  storage: multer.diskStorage({    destination(_, __, cb) {      cb(null, 'data/avatars');    },    filename(_, file: Express.Multer.File, cb: (error: (Error | null), filename: string) => void) {      cb(null, `${file.fieldname}-${randomUUID()}.${file.mimetype.split('/').pop()}`);    },  })});app.use(cors());app.use(express.json());app.use(passport.initialize());app.post('/upload', uploader.single('photo'), (req, res) => {  const filePath = req.file?.path ?? '';  const newFileName = req.file?.filename.replace('.png', '.jpeg');  sharp(filePath)    .resize(150, 150)    .toFormat('jpeg')    .toFile(filePath.replace('.png', '.jpeg'), (err) => {      if (err) throw new Error('can`t format file during upload');      unlinkSync(filePath);      res.json({        url: `/data/avatars/${newFileName}`      });    });});app.get('/data/avatars/:fileName', (req, res) => {  const path = `data/avatars/${req.params.fileName}`;  if (existsSync(path)) {    const file = readFileSync(path);    res.send(file);    return;  }  // TODO: find valid response for this case  res.status(400).send();});app.post('/auth/phone', async (req, res) => {  const phone = req.body.phone;  const user = req.user as IUserResponse;  const smsCode = randomCode();  if (!phone) return res.status(400).send();  try {    await request(`https://sms.ru/sms/send?api_id=${process.env.SMS_API_KEY}&to=79174423133&msg=${smsCode}`);    await Code.create({      code: smsCode,      user_id: user?.id,    });  } catch (error) {    res.status(500).json({      message: 'Error during sending sms code'    });  }});app.get('/auth/github', passport.authenticate('github'));app.get(  '/auth/github/callback',  passport.authenticate('github', { failureRedirect: '/login' }),  (req, res) => {    res.send(      `<script>window.opener.postMessage('${JSON.stringify(        req?.user      )}', '*');window.close()</script>`    );  });app.listen(PORT, () => {  console.log(`server running on port ${PORT}`);});