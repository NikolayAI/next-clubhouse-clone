import passport from 'passport';import { Strategy as GithubStrategy } from 'passport-github';import { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';// @ts-ignoreimport { User } from '../models';import { createJwtToken } from '../utils/createJwtToken';const opts = {  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),  secretOrKey: process.env.SECRET_KEY_JWT,};passport.use(  'jwt',  new JwtStrategy(opts, (jwt_payload, done) => {    console.log(jwt_payload);    done(null, jwt_payload);  }));passport.use(  'github',  new GithubStrategy(    {      clientID: process.env.GITHUB_CLIENT_ID ?? '',      clientSecret: process.env.GITHUB_CLIENT_SECRET ?? '',      callbackURL: 'http://localhost:3001/auth/github/callback'    },    async (accessToken, refreshToken, profile, cb) => {      try {        const currentUser = await User.findOne({          where: { username: profile?.username },        });        if (!currentUser) {          const params = {            fullname: profile?.displayName,            avatarUrl: profile?.photos?.[0].value,            isActive: 0,            username: profile?.username,            phone: '',          };          const user = await User.create(params);          cb(null, {            ...user.toJSON(),            token: createJwtToken(user),          });          return;        }        cb(null, {          ...currentUser.toJSON(),          token: createJwtToken(currentUser),        });      } catch (error: any) {        cb(error);      }    }  ));passport.serializeUser(function (user, done) {// @ts-ignore  done(null, user.id);});passport.deserializeUser(function (id, done) {// @ts-ignore  User.findById(id, function (err, user) {    done(err, user);  });});export { passport };