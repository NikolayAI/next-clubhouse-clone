{"version":3,"file":"effector.umd.js","sources":["../../src/effector/collection.ts","../../src/effector/throw.ts","../../src/effector/region.ts","../../src/effector/createNode.ts","../../src/effector/kernel.ts","../../src/effector/naming.ts","../../src/effector/config.ts","../../src/effector/template.ts","../../src/effector/createUnit.ts","../../src/effector/tag.ts","../../src/effector/combine.ts","../../src/effector/defer.ts","../../src/effector/createEffect.ts","../../src/effector/merge.ts","../../src/effector/sample.ts","../../src/effector/fork/util.ts","../../src/effector/observable.ts","../../src/effector/validate.ts","../../src/effector/is.ts","../../src/effector/id.ts","../../src/effector/step.ts","../../src/effector/stateRef.ts","../../src/effector/caller.ts","../../src/effector/getter.ts","../../src/effector/own.ts","../../src/effector/clearNode.ts","../../src/effector/subscription.ts","../../src/effector/forward.ts","../../src/effector/watch.ts","../../src/effector/split.ts","../../src/effector/fork/allSettled.ts","../../src/effector/attach.ts","../../src/effector/createApi.ts","../../src/effector/createDomain.ts","../../src/effector/fork/fork.ts","../../src/effector/fork/createScope.ts","../../src/effector/fromObservable.ts","../../src/effector/guard.ts","../../src/effector/fork/hydrate.ts","../../src/effector/restore.ts","../../src/effector/fork/scopeBind.ts","../../src/effector/fork/serialize.ts"],"sourcesContent":["export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: any, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: any,\n  subject: string,\n  suggestion: string,\n) =>\n  !condition &&\n  console.error(`${subject} is deprecated, use ${suggestion} instead`)\n","import {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nconst arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value: any\n  a: any\n  b: any\n  c?: any\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  scope?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {isRoot, currentPage, scope: forkPage, isWatch}\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem(\n          'child',\n          page,\n          nextNode,\n          stack,\n          finalValue,\n          getForkPage(stack),\n        )\n      })\n      const forkPage = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = scope.sidValuesMap[sid]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\nimport {forIn} from './collection'\n\nconst getCompostite = (unit: any): CompositeName => unit.compositeName\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, (unit: any) => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit) ? getCompostite(unit).fullName : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompostite(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompostite(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any,\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  if (rawConfig.and) {\n    args = rawConfig.and\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: any = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn: any = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport type {Store, Event} from './unit.h'\n\nimport {calc, compute, filter, mov, read} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n} from './kernel'\n\nimport type {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: any, unit: any, configA: any, configB?: any) => {\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const config = flattenConfig({\n    or: configB,\n    and: typeof configA === 'string' ? {name: configA} : configA,\n  })\n  const {parent = null, sid = null, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  const template = readTemplate()\n  return Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, nameOrConfig, maybeConfig),\n      regional: true,\n    }),\n    create(params: any, _: any) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: any) => deriveEvent(event, MAP, fn, [compute({fn: callStack})]),\n    filter: (fn: any) =>\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [filter({fn: callStack})]),\n    filterMap: (fn: any) =>\n      deriveEvent(event, 'filterMap', fn, [\n        compute({fn: callStack}),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: any) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(\n        contramapped,\n        event,\n        [compute({fn: callStack})],\n        'prepend',\n        fn,\n      )\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: any) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: any[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: any, fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = fn.fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && filter({fn: callStackAReg}),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (getMeta(store, 'serialize') !== 'ignore')\n      setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  assert(\n    getMeta(store, 'derived') || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, compute({fn: caller})]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, compute, calc, read} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport {callStack} from './caller'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    read(rawShape),\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && compute({fn: callStack}),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport type {Unit} from './index.h'\nimport {add} from './collection'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n) {\n  const instance: any = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        ({params, req, handler, args = [params]}, _, stack) => {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd = getParent(stack)\n          ? {params, req: {rs(data: any) {}, rj(data: any) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): any\n      rj(_: any): any\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  (data: any) =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      page: stack.page,\n      scope: getForkPage(stack),\n    })\n\nexport const sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  assertNodeSet(events, 'merge', 'first argument')\n  createLinkNode(events, result, [], 'merge')\n  return result\n}\n","import {combine} from './combine'\nimport {mov, compute, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {assertNodeSet, is, isObject, isVoid} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\nexport const groupInputs = (source: any, clock: any, method: string) => {\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  if (isVoid(source)) {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  return [source, clock] as const\n}\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, 'sample')\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  ;[source, clock] = groupInputs(source, clock, 'sample')\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  }\n  assertNodeSet(clock, 'sample', 'clock')\n  if (!metadata && !name) name = source.shortName\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent(name, metadata)\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(\n        clock,\n        target,\n        [\n          applyTemplate('sampleSourceLoader'),\n          read(sourceRef, !fn, batched),\n          fn && compute({fn: callARegStack}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        SAMPLE,\n        fn,\n        // scope: {fn, targetTemplate}\n      ),\n    ])\n    applyTemplate('sampleStoreSource', sourceRef)\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceRef = createStateRef()\n    const clockState = createStateRef()\n    applyTemplate('sampleNonStoreSource', hasSource, sourceRef, clockState)\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: SAMPLE},\n      regional: true,\n    })\n    own(source, [\n      createLinkNode(\n        clock,\n        target,\n        [\n          applyTemplate('sampleSourceLoader'),\n          mov({from: STACK, target: clockState}),\n          read(hasSource, true),\n          calc(hasSource => hasSource, true),\n          read(sourceRef, true, batched),\n          read(clockState),\n          fn && compute({fn: callStackAReg}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        SAMPLE,\n        fn,\n        // scope: {fn, targetTemplate}\n      ),\n    ])\n  }\n  return target\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key: any, value: any) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(values, (value, key) => {\n      assert(is.unit(key), 'Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return values\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: any) => value is Store<unknown>\nexport const event = is(EVENT) as (value: any) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: any,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: any) => value is Domain\nexport const scope = is(SCOPE) as (value: any) => value is Scope\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const isVoid = (value: any) => value === undefined\n\nexport const assertObject = (value: any) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: any,\n  method: string,\n  valueName: string,\n  reason: string,\n) =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: any,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag, Stack} from './kernel'\n\nconst cmd = (\n  type: 'compute' | 'mov',\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: any = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = ({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n}: {\n  fn?: (data: any, scope: {[key: string]: any}, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n}): Compute => cmd('compute', {fn, safe, filter}, priority, batch)\n\nexport const filter = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, filter: true})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (stack: any, {fn}: any, {a}: Stack) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: Stack) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: Stack) => fn(stack)\n","import type {Node, StateRef} from './index.h'\nimport type {Scope} from './unit.h'\n\nexport const getGraph = (graph: any): Node => graph.graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: any): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: any, field: string) => getGraph(unit).meta[field]\nexport const setMeta = (unit: any, field: string, value: any) =>\n  (getGraph(unit).meta[field] = value)\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, 'forward', '\"from\"')\n  assertNodeSet(to, 'forward', '\"to\"')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: 'forward', config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {Event} from './unit.h'\nimport type {NodeUnit, Cmd} from './index.h'\nimport {is, isFunction, isObject} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, filter, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\n\nconst launchCase = (\n  scopeTargets: Record<string, NodeUnit>,\n  field: string,\n  data: any,\n  stack: any,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]): any {\n  let targets: Record<string, Event<any> | NodeUnit>\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    targets = source.cases\n    match = source.match\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!knownCases) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(match, (_, key) => (targets[key] = createEvent(metadata)))\n    targets.__ = createEvent(metadata)\n  }\n  const owners = new Set(\n    ([] as NodeUnit[]).concat(source, Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn: any, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      filter({\n        fn(data, scopeTargets, stack) {\n          for (let i = 0; i < caseNames.length; i++) {\n            const caseName = caseNames[i]\n            const caseValue = includes(units, caseName)\n              ? stack.a[caseName]\n              : match[caseName](data)\n            if (caseValue) {\n              launchCase(scopeTargets, caseName, data, stack)\n              return\n            }\n          }\n          launchCase(scopeTargets, '__', data, stack)\n        },\n      }),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  createNode({\n    meta: {op: 'split'},\n    parent: source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (!knownCases) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: Scope; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-expect-error\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits = [start]\n  const launchParams = [] as Array<{params: any; req: any} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: any) {\n              //@ts-ignore\n              defer.value = {status: 'done', value}\n            },\n            rj(value: any) {\n              //@ts-ignore\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import {combine} from './combine'\nimport {createEffect, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {getGraph, getStoreState, setMeta} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const rj = onSettled(params, req, false, anyway, stack)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams: any\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {rs: onSettled(params, req, true, anyway, stack), rj},\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const node = createNode({family: {type: DOMAIN}, regional: true})\n\n  const result: any = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  }\n\n  node.meta = initUnit(DOMAIN, result, nameOrConfig, maybeConfig)\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory: any, tag) => {\n      const lowerCaseTag = tag.toLowerCase()\n\n      const trigger = createNamedEvent(`on${tag}`)\n      result.hooks[lowerCaseTag] = trigger\n\n      const acc = new Set<any>()\n      result.history[`${lowerCaseTag}s`] = acc\n\n      trigger.create = res => {\n        launch(trigger, res)\n        return res\n      }\n      add(\n        getGraph(trigger).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      trigger.watch(data => {\n        own(result, [data])\n        acc.add(data)\n        if (!data.ownerSet) data.ownerSet = acc\n        if (!getParent(data)) data.parent = result\n      })\n      own(result, [trigger])\n\n      result[`onCreate${tag}`] = (hook: (data: any) => any) => {\n        forEach(acc, hook)\n        return trigger.watch(hook)\n      }\n      result[`create${tag}`] = result[lowerCaseTag] = (\n        nameOrConfig: any,\n        config?: Config,\n      ) => trigger(factory(nameOrConfig, {parent: result, or: config}))\n    },\n  )\n\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  return result\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?: any; handlers?: any},\n  optiionalConfig?: {values?: any; handlers?: any},\n) {\n  let config: {values?: any; handlers?: any} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (_, scope) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack && getParent(storeStack)) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            getMeta(getParent(storeStack).node, 'op') !== 'combine'\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store: any) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {groupInputs, validateSampleConfig, sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {calc, filter} from './step'\nimport {callStack} from './caller'\nimport {assertNodeSet, is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\n\nexport function guard(...args: any[]) {\n  const METHOD = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, METHOD)\n  let {\n    filter: filterFn,\n    greedy,\n    clock,\n    name = metadata && metadata.name ? metadata.name : METHOD,\n  } = config\n  const target = config.target || createEvent(name, metadata)\n  const filterIsUnit = is.unit(filterFn)\n  ;[source, clock] = groupInputs(source, clock, METHOD)\n  if (clock) {\n    assertNodeSet(clock, METHOD, 'clock')\n    source = sample({\n      source,\n      clock,\n      greedy,\n      fn: filterIsUnit ? null : (source: any, clock: any) => ({source, clock}),\n    })\n  }\n  assertNodeSet(target, METHOD, 'target')\n  if (filterIsUnit) {\n    sample({\n      source: filterFn,\n      clock: source,\n      target: createNode({\n        node: [calc(({guard}) => guard, true), calc(({data}) => data)],\n        child: target,\n        meta: {op: METHOD},\n        family: {\n          owners: [source, filterFn, target, ...[].concat(clock ? clock : [])],\n          links: target,\n        },\n        regional: true,\n      }),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    assert(isFunction(filterFn), '`filter` should be function or unit')\n    createLinkNode(\n      source,\n      target,\n      clock\n        ? [\n            filter({fn: ({source, clock}, {fn}) => fn(source, clock)}),\n            calc(({source}) => source),\n          ]\n        : [filter({fn: callStack})],\n      METHOD,\n      filterFn,\n    )\n  }\n  return target\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: any}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) return obj\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit: any, {scope}: {scope?: Scope} = {}) {\n  assert(\n    scope || forkPage,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","CROSSLINK","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","REG_A","VALUE","store","STORE","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompostite","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","and","or","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","Object","assign","graphite","initUnit","EVENT","watch","watchUnit","map","deriveEvent","MAP","compute","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","createStore","defaultState","props","plainState","createStateRef","updates","createNamedEvent","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","config","lastResult","isObject","storeState","innerStore","derived","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","isFunction","updateFilter","defaultConfig","upd","_","b","read","a","mov","sid","setMeta","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","kind","EFFECT","use","runner","getCurrent","anyway","finally","done","named","status","error","doneData","failData","handlerId","getType","scope_","handler_","onResolve","onSettled","onReject","ok","runFn","then","op","fx","savedFork","setForkPage","inFlight","x","pending","amount","merge","events","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","sample","clock","metadata","batched","greedy","groupInputs","isUpward","sourceRef","SAMPLE","hasSource","clockState","traverseStores","root","visit","includes","normalizeValues","values","assertEach","observableSymbol","Symbol","observable","DOMAIN","SCOPE","SAMPLER","BARRIER","effect","domain","removeItem","pos","indexOf","splice","push","subject","suggestion","console","assertNodeSetItem","valueName","reason","idCount","nextUnitID","nextStepID","cmd","batch","nextBarrierID","run","isEffect","toStack","samplerPriority","ref","before","graph","val","ownerUnit","_link","readSidRoot","flat","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","isKernelCall","refsMap","sidValuesMap","sidIdMap","isFresh","needToAssign","compositeName","flattenConfig","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","effects","domains","unsubscribe","scopeFn","hookType","hooks","configA","configB","isDomain","unitId","serialize","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","c","childRef","defaultShape","sidechain","launchCase","scopeTargets","start","ctx","reject","parentFork","defers","launchUnits","launchParams","injected","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","acc","res","hook","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","resultScope","cloneOf","createScope","valuesSidMap","opts","observableItem","disposer","complete","METHOD","filterFn","filterIsUnit","guard","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","savedForkPage","ignoredStores","ignore","onlyChanges","rawName","targets","match","knownCases","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","loc"],"mappings":"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"}